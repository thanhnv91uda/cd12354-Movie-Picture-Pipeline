name: Frontend Continuous Deployment
on:
  workflow_dispatch:
  
  pull_request:
    branches:
      - main
    paths: starter/frontend

defaults:
  run:
    working-directory: starter/frontend

jobs:
#   test:
#     runs-on: ubuntu-24.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js environment
#         uses: actions/setup-node@v4.0.4
#         with:
#           node-version: latest
          
#       - name: Cache
#         uses: actions/cache@v4.0.2
#         with:
#           # A list of files, directories, and wildcard patterns to cache and restore
#           path: ~/.npm
#           # An explicit key for restoring and saving the cache
#           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                
#       - name: install dependancies
#         run: npm ci

#       - name: Run tests
#         run: npm test
#   lint:
#     runs-on: ubuntu-24.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js environment
#         uses: actions/setup-node@v4.0.4
#         with:
#           node-version: latest

#       - name: Cache
#         uses: actions/cache@v4.0.2
#         with:
#           # A list of files, directories, and wildcard patterns to cache and restore
#           path: ~/.npm
#           # An explicit key for restoring and saving the cache
#           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
#       - name: install dependancies
#         run: npm ci

#       - name: Run tests
#         run: npm run lint        
#   build:
#     needs: [test,lint]
#     runs-on: ubuntu-24.04
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js environment
#         uses: actions/setup-node@v4.0.4
#         with:
#           node-version: latest

#       - name: Cache
#         uses: actions/cache@v4.0.2
#         with:
#           # A list of files, directories, and wildcard patterns to cache and restore
#           path: ~/.npm
#           # An explicit key for restoring and saving the cache
#           key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
#       - name: install dependancies
#         run: npm ci

#       - name: Run test
#         run: npm run test

#       - name: Build Docker image
#         run: docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 --tag=mp-frontend:latest .

#       - name: Run Docker container
#         run: docker run -p 3000:3000 --name mp-frontend -d mp-frontend

#       - name: Stop docker
#         run: docker stop mp-frontend
  deploy:
    # needs: [build]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials Action for GitHub Actions
        # You may pin to the exact commit or the version.
        # uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}          
          aws-region: us-east-1
          
      - name: Amazon ECR Login Action for GitHub Actions
        # You may pin to the exact commit or the version.
        # uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ vars.FRONTEND_ECR }}
          REPOSITORY: ${{ vars.FRONTEND_REPO }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{ vars.REACT_APP_MOVIE_API_URL }} -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy Kubernetes manifests
        env:
          REGISTRY: ${{ vars.FRONTEND_ECR }}
          REPOSITORY: ${{ vars.FRONTEND_REPO }}
          IMAGE_TAG: ${{ github.sha }}      
        run: |
          cd k8s
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          ./kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
          ./kustomize build
      
      - name: Install kubectl  
        uses: nikosch86/github-action-eks-kubectl@main
        with: 
          command: "version"
        env:
          EKS_CLUSTER: "cluster"

      - name: Deploy k8s
        run: |
          aws eks update-kubeconfig --region us-east-1 --name cluster
          cd k8s
          ./kustomize build | kubectl apply -f -
